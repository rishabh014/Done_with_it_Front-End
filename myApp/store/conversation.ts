import { createSelector, createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from ".";

// Define the UserProfile interface
interface UserProfile {
  id: string;
  name: string;
  avatar?: string;
}

// Define the Chat interface
interface Chat {
  text: string;
  time: string;
  id: string;
  viewed: boolean;
  user: UserProfile;
}

// Define the Conversation interface
export interface Conversation {
  id: string;
  chats: Chat[];
  peerProfile: {
    avatar?: string;
    name: string;
    id: string;
  };
}

// Define the UpdatePayload type for actions
type UpdatePayload = {
  chat: Chat;
  conversationId: string;
  peerProfile: UserProfile;
};

// Define the initial state structure
interface InitialState {
  conversations: Conversation[];
}

// Initial state
const initialState: InitialState = {
  conversations: [],
};

// Create the slice
const slice = createSlice({
  name: "conversation",
  initialState,
  reducers: {
    // Action to add conversations to the state
    addConversation(
      state,
      { payload }: PayloadAction<InitialState["conversations"]>
    ) {
      state.conversations = payload;
    },
    updateConversation(
      { conversations },
      { payload }: PayloadAction<UpdatePayload>
    ) {
      const index = conversations.findIndex(
        ({ id }) => id === payload.conversationId
      );
      if (index === -1) {
        //we have to create a new conversation because there is none with this id
        conversations.push({
          id: payload.conversationId,
          chats: [payload.chat],
          peerProfile: [payload.peerProfile],
        });
      } else {
        conversations[index].chats.push(payload.chat);
      }
    },
  },
});

// Export the action creators generated by createSlice
export const { addConversation, updateConversation } = slice.actions;

export const selectConversationById = (conversationId: string) => {
  return createSelector(
    (state: RootState) => state,
    ({ conversation }) => {
      return conversation.conversations.find(({ id }) => id === conversationId);
    }
  );
};

// Export the reducer to be used in the store
export default slice.reducer;
